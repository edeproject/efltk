// generated by Fast Light User Interface Designer (fluid) version 2,0003

#include "alignment_panel.h"

Fl_Window* alignment_window;

static void cb_Close(Fl_Button*, void*) {
  alignment_window->hide();
}

Fl_Value_Input* horizontal_input;

Fl_Value_Input* vertical_input;

Fl_Value_Input* snap_input;

Fl_Input* header_file_input;

Fl_Input* code_file_input;

Fl_Check_Button* include_H_from_C_button;

Fl_Check_Button* locale;

static void cb_locale(Fl_Check_Button*, void*) {
  i18n = (locale->value()>0);
}

Fl_Window* make_alignment_window() {
  Fl_Window* w;
   {Fl_Window* o = alignment_window = new Fl_Window(300, 275, _("fluid Preferences"));
    w = o;
     {Fl_Button* o = new Fl_Button(210, 248, 85, 22, _("Close"));
      o->callback((Fl_Callback*)cb_Close);
    }
     {Fl_Tabs* o = new Fl_Tabs(0, 0, 300, 235);
       {Fl_Group* o = new Fl_Group(0, 20, 300, 215, _("Alignment"));
        o->align(FL_ALIGN_TOP | FL_ALIGN_LEFT);
         {Fl_Value_Input* o = horizontal_input = new Fl_Value_Input(90, 42, 100, 23, _("Horizontal:"));
          o->maximum(10);
          o->step(1);
          o->callback((Fl_Callback*)alignment_cb, (void*)(1));
        }
         {Fl_Value_Input* o = vertical_input = new Fl_Value_Input(90, 72, 100, 23, _("Vertical:"));
          o->maximum(10);
          o->step(1);
          o->callback((Fl_Callback*)alignment_cb, (void*)(2));
        }
         {Fl_Value_Input* o = snap_input = new Fl_Value_Input(90, 102, 100, 23, _("Snap:"));
          o->maximum(10);
          o->step(1);
          o->callback((Fl_Callback*)alignment_cb, (void*)(3));
        }
         {Fl_Box* o = new Fl_Box(5, 5, 290, 30, _("Grid size and snapping."));
          o->label_size(10);
          o->align(FL_ALIGN_TOP | FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
       {Fl_Group* o = new Fl_Group(0, 20, 300, 215, _("Output File Names"));
        o->align(FL_ALIGN_TOP | FL_ALIGN_LEFT);
        o->hide();
         {Fl_Box* o = new Fl_Box(10, 10, 280, 30, _("Use \"name.ext\" to set name or just \".ext\" to set only extension."));
          o->label_size(10);
          o->align(132|FL_ALIGN_INSIDE);
        }
         {Fl_Input* o = header_file_input = new Fl_Input(100, 45, 90, 23, _("Header File:"));
          o->callback((Fl_Callback*)header_input_cb, (void*)(1));
          o->when(FL_WHEN_CHANGED);
        }
         {Fl_Input* o = code_file_input = new Fl_Input(100, 72, 90, 23, _("Code File:"));
          o->callback((Fl_Callback*)code_input_cb, (void*)(1));
          o->when(FL_WHEN_CHANGED);
        }
         {Fl_Check_Button* o = include_H_from_C_button = new Fl_Check_Button(10, 106, 190, 22, _("#include \"header\" in code"));
          o->value(1);
          o->callback((Fl_Callback*)include_H_from_C_button_cb);
        }
        o->end();
      }
       {Fl_Group* o = new Fl_Group(0, 20, 300, 215, _("i18n"));
        o->hide();
         {Fl_Box* o = new Fl_Box(10, 10, 280, 40, _("Use i18n. You can use GNU gettext .mo files or EFLTK .etb translation files. \
Using .etb is recommended."));
          o->label_size(10);
          o->align(133|FL_ALIGN_INSIDE);
        }
         {Fl_Check_Button* o = locale = new Fl_Check_Button(10, 55, 220, 20, _("Use i18n"));
          o->callback((Fl_Callback*)cb_locale);
          o->value(i18n);
        }
        o->end();
      }
      o->end();
    }
    new Fl_Divider(5, 235, 290, 10, _("label"));
    o->set_non_modal();
    o->end();
  }
  return  w;
}
