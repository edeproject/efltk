# data file for the eFLTK User Interface Designer (eFLUID)
version 2.0003 
images_dir ./ 
i18n 
header_name {.h} 
code_name {.cpp} 
gridx 5 
gridy 5 
snap 3
decl {extern int gbrace_style;} {public
} 

decl {extern int gno_space_parens;} {public
} 

decl {extern int gbrace_functions;} {public
} 

decl {extern int gindent_tabs;} {public
} 

decl {extern int gtab_size;} {public
} 

decl {extern int galways_return_parens;} {public
} 

decl {extern int gindent_code;} {public
} 

decl {extern void save_coding_style();} {public
} 

decl {extern void write_code_block(char *pBlock);} {public
} 

decl {extern void load_coding_style();} {public
} 

decl {extern const char *get_opening_brace(int is_function);} {selected public
} 

decl {extern const char *get_indent_string(int level);} {public
} 

decl {extern void show_coding_style_cb(Fl_Widget *, void *);} {public
} 

decl {extern void write_includes_from_code(char*);} {public
} 

decl {int brace_style;} {} 

decl {int no_space_parens;} {} 

decl {int brace_functions;} {} 

decl {int indent_tabs;} {} 

decl {int tab_size;} {} 

decl {int always_return_parens;} {} 

decl {int indent_code;} {} 

Function {use_coding_style()} {open private return_type void attributes static
} {
  code {gbrace_style = brace_style;
gno_space_parens = no_space_parens;
gbrace_functions = brace_functions;
gindent_tabs = indent_tabs;
gtab_size = tab_size;
galways_return_parens = always_return_parens;} {}
} 

Function {make_codingstyle_window()} {open
} {
  Fl_Window {} {open
    xywh {434 180 310 255} resizable visible
  } {
    Fl_Tabs {} {open
      xywh {0 0 303 220} color 0xfffffffe
    } {
      Fl_Group {} {
        label {Brace Style} open
        xywh {1 24 301 195}
      } {
        Fl_Group {} {
          label {Brace Style}
          xywh {14 22 282 122} align FL_ALIGN_TOP|FL_ALIGN_LEFT box ENGRAVED_BOX
        } {
          Fl_Box {} {
            label {if ( x ) \{}
            private xywh {20 6 47 20} align FL_ALIGN_LEFT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {++y;}
            private xywh {20 25 45 20} align FL_ALIGN_RIGHT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {\}}
            private xywh {20 41 36 20} align FL_ALIGN_LEFT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {if ( x )}
            private xywh {114 6 47 20} align FL_ALIGN_LEFT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {\{}
            private xywh {114 25 36 20} align FL_ALIGN_LEFT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {++y;}
            private xywh {115 42 46 20} align FL_ALIGN_RIGHT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {\}}
            private xywh {114 59 36 20} align FL_ALIGN_LEFT|FL_ALIGN_INSIDE
          }
          Fl_Round_Button pStyle1 {
            label {Style 1}
            callback {if(o->value())
   brace_style = 1;}
            private xywh {16 84 66 25} type RADIO value 1
          }
          Fl_Box {} {
            label {if ( x )}
            private xywh {201 6 47 20} align FL_ALIGN_LEFT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {\{}
            private xywh {201 25 36 20} align FL_ALIGN_RIGHT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {++y;}
            private xywh {227 42 34 22} align FL_ALIGN_RIGHT|FL_ALIGN_INSIDE
          }
          Fl_Box {} {
            label {\}}
            private xywh {201 59 36 20} align FL_ALIGN_RIGHT|FL_ALIGN_INSIDE
          }
          Fl_Round_Button pStyle2 {
            label {Style 2}
            callback {if(o->value())
   brace_style = 2;}
            private xywh {109 84 66 25} type RADIO
          }
          Fl_Round_Button pStyle3 {
            label {Style 3}
            callback {if(o->value())
   brace_style = 3;}
            private xywh {200 84 66 25} type RADIO
          }
        }
        Fl_Check_Button pNoSpaceParens {
          label {No space before parentheses}
          callback {no_space_parens = o->value();;}
          private xywh {15 147 195 22}
        }
        Fl_Check_Button pBraceFuncs {
          label {Apply to function braces}
          callback {brace_functions = o->value();}
          private xywh {15 170 174 22} value 1
        }
      }
      Fl_Group {} {
        label Other open
        xywh {1 24 301 195} hide
      } {
        Fl_Group {} {
          label Indentation open
          xywh {11 22 284 90} align FL_ALIGN_TOP|FL_ALIGN_LEFT box ENGRAVED_BOX
        } {
          Fl_Value_Input pTabSize {
            label {Tab size for indents}
            callback {tab_size = (int)o->value();}
            private xywh {129 33 60 22} maximum 12 value 2
          }
          Fl_Check_Button pIndentTabs {
            label {Indent with tabs}
            callback {indent_tabs = o->value();
if(o->value())
    pTabSize->hide();
else
   pTabSize->show();}
            private xywh {13 7 114 22}
          }
          Fl_Check_Button pIndentCode {
            label {Indent code blocks}
            callback {indent_code = o->value();}
            private xywh {14 58 151 22}
          }
        }
        Fl_Check_Button pReturnParens {
          label {Always use parentheses on return}
          callback {always_return_parens = o->value();}
          private xywh {10 120 220 22}
        }
      }
    }
    Fl_Button {} {
      label Cancel
      callback {o->window()->hide();}
      xywh {115 227 59 23}
    }
    Fl_Button {} {
      label Save
      callback {use_coding_style();
save_coding_style();
o->window()->hide();}
      xywh {180 227 59 23}
    }
    Fl_Button {} {
      label Use
      callback {use_coding_style();
o->window()->hide();}
      xywh {245 227 59 23}
    }
  }
} 

Function {load_codingstyle_window()} {open return_type void
} {
  code {brace_style = gbrace_style;
no_space_parens = gno_space_parens;
brace_functions = gbrace_functions;  
indent_tabs = gindent_tabs;
tab_size = gtab_size;
always_return_parens = galways_return_parens;
indent_code = gindent_code;
pStyle1->value(gbrace_style == 1);
pStyle2->value(gbrace_style == 2);
pStyle3->value(gbrace_style == 3);
pNoSpaceParens->value(gno_space_parens);
pBraceFuncs->value(gbrace_functions);
pIndentTabs->value(gindent_tabs);
pTabSize->value(gtab_size);
pReturnParens->value(galways_return_parens);
if(gindent_tabs)
   pTabSize->hide();
else
   pTabSize->show();
pIndentCode->value(gindent_code);} {}
} 
