// generated by Fast Light User Interface Designer (fluid) version 2,0003

#include "images.h"
#include <config.h>

#include <efltk/Fl_Image.h>

#include <efltk/Fl_Images.h>

static void cb_EXIT(Fl_Button* o, void*) {
  o->window()->hide();
}

Fl_Window* make_window() {
  Fl_Window* w;
   {Fl_Window* o = new Fl_Window(430, 304);
    w = o;
     {Fl_Box* o = new Fl_Box(5, 5, 195, 55, "XPM");
      o->image(Fl_Image::read_xpm("rgb.xpm"));
      o->label_font(fl_fonts+1);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
     {Fl_Box* o = new Fl_Box(5, 65, 190, 55, "BMP");
      o->image(Fl_Image::read("rgb.bmp"));
      o->label_font(fl_fonts+1);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
     {Fl_Box* o = new Fl_Box(5, 125, 190, 55, "GIF");
      o->image(Fl_Image::read("rgb.gif"));
      o->label_font(fl_fonts+1);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
     {Fl_Box* o = new Fl_Box(5, 185, 195, 55, "PNG");
      o->image(Fl_Image::read("rgb.png"));
      o->label_font(fl_fonts+1);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      if(HAVE_PNG==0) o->label("PNG support not compiled");
    }
     {Fl_Box* o = new Fl_Box(5, 245, 200, 55, "JPEG");
      o->image(Fl_Image::read("rgb.jpg"));
      o->label_font(fl_fonts+1);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      if(HAVE_JPEG==0) o->label("JPEG support not compiled");
    }
     {Fl_Box* o = new Fl_Box(220, 10, 200, 195, "EFltk image test.\nAll should look exactly same.\n50 pixels of each color, RG\
B from left to right.\n\nThis ofcourse means, that all formats are compiled in\
.\n\nXPM, BMP and GIF should always work.");
      o->box(FL_ENGRAVED_BOX);
      o->align(133|FL_ALIGN_INSIDE);
    }
     {Fl_Button* o = new Fl_Button(220, 215, 200, 80, "EXIT");
      o->label_font(fl_fonts+1);
      o->label_type(FL_ENGRAVED_LABEL);
      o->label_size(36);
      o->callback((Fl_Callback*)cb_EXIT);
    }
    o->end();
  }
  return  w;
}

int main(int argc, char *argv[]) {
  fl_init_images_lib();
  Fl_Window *w = make_window();
  w->show();
  return Fl::run();
}
